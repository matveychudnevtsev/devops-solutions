def addHeaders(selectedManifest, userInputPolicies, manifestsMap, envoyFilters) {
    selectedManifest.each { manifestName ->
        // Шаг 1: Пользователь выбирает префиксы
        def selectedPrefixes = userInputPolicies[manifestName].findAll { k, v -> v == true }.keySet()
        def updatedFilter = envoyFilters.items.find { it.metadata.name == manifestName }

        selectedPrefixes.each { prefix ->
            log.infoCustom "Обработка добавления headers для префикса ${prefix} в ${manifestName}"

            // Шаг 2: Пользователь выбирает, сколько regex добавить (дефолт 1)
            def regexCountInput = input(
                id: "userInputRegexCount_${manifestName}_${prefix.replaceAll(/[\/]/, "_")}",
                message: "Сколько регулярных выражений вы хотите добавить в ${manifestName} - ${prefix}?",
                parameters: [string(name: "regexCount", defaultValue: "1", description: "Количество регулярных выражений для добавления")]
            )
            def regexCount = regexCountInput['regexCount'] as Integer // Преобразуем ввод в число
            log.infoCustom "Пользователь выбрал добавить ${regexCount} регулярных выражений для префикса ${prefix}"

            // Шаг 3: Пользователь вводит регулярные выражения
            def regexInputs = []
            for (int i = 1; i <= regexCount; i++) {
                regexInputs.add(
                    string(name: "regex_${i}", defaultValue: '', description: "Введите регулярное выражение ${i} для префикса ${prefix}")
                )
            }

            def userInputRegexes = input(
                id: "userInputRegexAdd_${manifestName}_${prefix.replaceAll(/[\/]/, "_")}",
                message: "Введите регулярные выражения для добавления в ${manifestName} - ${prefix}",
                parameters: regexInputs
            )
            
            // Логируем введенные регулярные выражения
            userInputRegexes.each { key, value ->
                log.infoCustom "Пользователь ввел регулярное выражение: ${value}"
            }

            // Шаг 4: Добавление новых блоков header в соответствующие политики
            updatedFilter.spec.configPatches.each { patch ->
                def rules = patch.patch?.value?.typed_config?.rules
                if (rules?.policies) {
                    rules.policies.each { policyName, policyValue ->
                        // Проверка на наличие соответствующего prefix
                        def permissions = policyValue.permissions
                        def prefixExists = permissions?.any { permission ->
                            permission.and_rules?.rules?.any { rule ->
                                rule.url_path?.path?.prefix == prefix
                            }
                        }

                        if (prefixExists) {
                            log.infoCustom "Добавляем headers в политику с prefix: ${prefix}"

                            // Если у политики еще нет principals, создаем их как пустой список
                            if (!policyValue.principals) {
                                policyValue.principals = []
                            }

                            // Добавляем каждый введенный regex как новый блок header
                            userInputRegexes.each { key, regex ->
                                def newPrincipal = [
                                    header: [
                                        name: "x-forwarded-client-cert",
                                        safe_regex_match: [
                                            google_re2: [max_program_size: '4294967295'],
                                            regex: regex
                                        ]
                                    ]
                                ]
                                policyValue.principals.add(newPrincipal)
                                log.infoCustom "Добавлен новый header с regex: ${regex} в префикс ${prefix}"
                            }
                        }
                    }
                }
            }
        }
    }
}
