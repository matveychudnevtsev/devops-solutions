def addHeaders(selectedManifest, userInputPolicies, manifestsMap, envoyFilters) {
    selectedManifest.each { manifestName ->
        // Шаг 1: Пользователь выбирает префиксы
        def selectedPrefixes = userInputPolicies[manifestName].findAll { k, v -> v == true }.keySet()
        def updatedFilter = envoyFilters.items.find { it.metadata.name == manifestName }

        selectedPrefixes.each { prefix ->
            log.infoCustom "Обработка добавления headers для префикса ${prefix} в ${manifestName}"

            // Преобразуем префикс в безопасный для ключей формат
            def safePrefix = prefix.replaceAll(/[\/]/, "_")

            // Шаг 2: Пользователь вводит одно регулярное выражение для каждого префикса
            def userInputRegex = input(
                id: "userInputRegexAdd_${manifestName}_${safePrefix}",
                message: "Введите регулярное выражение для добавления в ${manifestName} - ${prefix}",
                parameters: [string(name: "regex_${safePrefix}", defaultValue: '', description: "Введите регулярное выражение для префикса ${prefix}")]
            )

            // Логируем введенное регулярное выражение
            log.infoCustom "Пользователь ввел регулярное выражение: ${userInputRegex["regex_${safePrefix}"]} для префикса ${prefix}"

            // Шаг 3: Добавление нового блока header в соответствующие политики
            updatedFilter.spec.configPatches.each { patch ->
                def rules = patch.patch?.value?.typed_config?.rules
                if (rules?.policies) {
                    rules.policies.each { policyName, policyValue ->
                        // Проверка на наличие соответствующего prefix
                        def permissions = policyValue.permissions
                        def prefixExists = permissions?.any { permission ->
                            permission.and_rules?.rules?.any { rule ->
                                rule.url_path?.path?.prefix == prefix
                            }
                        }

                        if (prefixExists) {
                            log.infoCustom "Добавляем headers в политику с prefix: ${prefix}"

                            // Если у политики еще нет principals, создаем их как пустой список
                            if (!policyValue.principals) {
                                policyValue.principals = []
                            }

                            // Добавляем новое регулярное выражение как новый блок header
                            def newPrincipal = [
                                header: [
                                    name: "x-forwarded-client-cert",
                                    safe_regex_match: [
                                        google_re2: [max_program_size: '4294967295'],
                                        regex: userInputRegex["regex_${safePrefix}"]
                                    ]
                                ]
                            ]
                            policyValue.principals.add(newPrincipal)
                            log.infoCustom "Добавлен новый header с regex: ${userInputRegex["regex_${safePrefix}"]} в префикс ${prefix}"
                        }
                    }
                }
            }
        }
    }
}
