def allClusters = new HashSet()
allClusters.addAll(totalAS.keySet())
allClusters.addAll(testAS.keySet())
allClusters.addAll(prodAS.keySet())

// Преобразование в список и сортировка
def sortedClusters = new ArrayList(allClusters)
Collections.sort(sortedClusters, new Comparator() {
    int compare(a, b) {
        if (a == "" && b == "") return 0
        if (a == "") return 1
        if (b == "") return -1
        return a.compareTo(b)
    }
})

// Генерация содержимого таблицы
def tableContent = new StringBuilder()
tableContent.append("<tr><th>Кластер</th><th>Цель</th><th>IFT</th><th>ПРОМ</th></tr>")
sortedClusters.each { cluster ->
    def totalValue = totalAS.containsKey(cluster) ? totalAS[cluster] : 0
    def testValue = testAS.containsKey(cluster) ? testAS[cluster] : 0
    def prodValue = prodAS.containsKey(cluster) ? prodAS[cluster] : 0
    
    tableContent.append("<tr>")
    tableContent.append("<td>${cluster == '' ? 'Без кластера' : cluster}</td>")
    tableContent.append("<td>${totalValue}</td>")
    tableContent.append("<td>${testValue}</td>")
    tableContent.append("<td>${prodValue}</td>")
    tableContent.append("</tr>")
}
------

def allClusters = mapaPoAsClusters.keySet() + mapaPoAsClustersTest.keySet() + mapaPoAsClustersProm.keySet()

// Сортировка кластеров
def sortedClusters = allClusters.toList().sort { a, b ->
    if (a == "" && b == "") return 0
    if (a == "") return 1
    if (b == "") return -1
    return a.compareTo(b)
}

// Генерация содержимого таблицы
def tableContent = new StringBuilder()
tableContent.append("<tr><th>Кластер</th><th>Цель</th><th>IFT</th><th>ПРОМ</th></tr>")
sortedClusters.each { cluster ->
    def totalValue = mapaPoAsClusters.containsKey(cluster) ? mapaPoAsClusters[cluster] : 0
    def testValue = mapaPoAsClustersTest.containsKey(cluster) ? mapaPoAsClustersTest[cluster] : 0
    def prodValue = mapaPoAsClustersProm.containsKey(cluster) ? mapaPoAsClustersProm[cluster] : 0
    
    tableContent.append("<tr>")
    tableContent.append("<td>${cluster == '' ? 'Без кластера' : cluster}</td>")
    tableContent.append("<td>${totalValue}</td>")
    tableContent.append("<td>${testValue}</td>")
    tableContent.append("<td>${prodValue}</td>")
    tableContent.append("</tr>")
}


def allClusters = mapaPoAsClusters.keySet() + mapaPoAsClustersTest.keySet() + mapaPoAsClustersProm.keySet()

// Преобразование в список и простая сортировка
def sortedClusters = allClusters.toList().sort()

// Перемещаем пустую строку (если она есть) в конец списка
if (sortedClusters.remove("")) {
    sortedClusters.add("")
}

// Генерация содержимого таблицы
def tableContent = new StringBuilder()
tableContent.append("<tr><th>Кластер</th><th>Цель</th><th>IFT</th><th>ПРОМ</th></tr>")
sortedClusters.each { cluster ->
    def totalValue = mapaPoAsClusters.containsKey(cluster) ? mapaPoAsClusters[cluster] : 0
    def testValue = mapaPoAsClustersTest.containsKey(cluster) ? mapaPoAsClustersTest[cluster] : 0
    def prodValue = mapaPoAsClustersProm.containsKey(cluster) ? mapaPoAsClustersProm[cluster] : 0
    
    tableContent.append("<tr>")
    tableContent.append("<td>${cluster == '' ? 'Без кластера' : cluster}</td>")
    tableContent.append("<td>${totalValue}</td>")
    tableContent.append("<td>${testValue}</td>")
    tableContent.append("<td>${prodValue}</td>")
    tableContent.append("</tr>")
}



def allClustersTest = mapaPoClusteramTestAll.keySet() + mapaPoClusteramTest.keySet()
def sortedClustersTest = allClustersTest.toList().sort()
if (sortedClustersTest.remove("")) {
    sortedClustersTest.add("")
}

def tableContentTest = new StringBuilder()
tableContentTest.append("<tr><th>Кластер</th><th>Цель</th><th>POT</th></tr>") // 
sortedClustersTest.each { cluster ->
    def totalValue = mapaPoClusteramTestAll.containsKey(cluster) ? mapaPoClusteramTestAll[cluster] : 0
    def pvdotValue = mapaPoClusteramTest.containsKey(cluster) ? mapaPoClusteramTest[cluster] : 0
    
    tableContentTest.append("<tr>")
    tableContentTest.append("<td>${cluster == '' ? 'Без кластера' : cluster}</td>")
    tableContentTest.append("<td>${totalValue}</td>")
    tableContentTest.append("<td>${pvtValue}</td>") //
    tableContentTest.append("</tr>")
}

def htmlTest = """
<ac:structured-macro ac:name="chart-from-table">
  <ac:parameter ac:name="type">column</ac:parameter>
  <ac:parameter ac:name="title">Количество А по кластерам (Тест)</ac:parameter>
  <ac:parameter ac:name="height">500</ac:parameter>
  <ac:parameter ac:name="columns">1,2,3</ac:parameter>
  <ac:parameter ac:name="is3d">true</ac:parameter>
  <ac:parameter ac:name="alignment">center</ac:parameter>
  <ac:parameter ac:name="legend-position">right</ac:parameter>
  <ac:parameter ac:name="hide-table">true</ac:parameter>
  <ac:rich-text-body>
    <table>
      <tbody>
        ${tableContentTest}
      </tbody>
    </table>
  </ac:rich-text-body>
</ac:structured-macro>
"""

// Для второй таблицы и диаграммы 
def allClustersProm = mapaPoClusteramPm.keySet() + mapaPoClusteramPrmPOT.keySet() // 
def sortedClustersProm = allClustersProm.toList().sort()
if (sortedClustersProm.remove("")) {
    sortedClustersProm.add("")
}

def tableContentProm = new StringBuilder()
tableContentProm.append("<tr><th>Кластер</th><th>Цель</th><th>PV DOT</th></tr>")
sortedClustersProm.each { cluster ->
    def totalValue = mapaPoClusteramProm.containsKey(cluster) ? mapaPoClusteramProm[cluster] : 0
    def pvdotValue = mapaPoClusteramPromPVDOT.containsKey(cluster) ? mapaPoClusteramPromPVDOT[cluster] : 0
    
    tableContentProm.append("<tr>")
    tableContentProm.append("<td>${cluster == '' ? 'Без кластера' : cluster}</td>")
    tableContentProm.append("<td>${totalValue}</td>")
    tableContentProm.append("<td>${pvdotValue}</td>")
    tableContentProm.append("</tr>")
}

def htmlProm = """
<ac:structured-macro ac:name="chart-from-table">
  <ac:parameter ac:name="type">column</ac:parameter>
  <ac:parameter ac:name="title">Количество А по кластерам (П)</ac:parameter>
  <ac:parameter ac:name="height">500</ac:parameter>
  <ac:parameter ac:name="columns">1,2,3</ac:parameter>
  <ac:parameter ac:name="is3d">true</ac:parameter>
  <ac:parameter ac:name="alignment">center</ac:parameter>
  <ac:parameter ac:name="legend-position">right</ac:parameter>
  <ac:parameter ac:name="hide-table">true</ac:parameter>
  <ac:rich-text-body>
    <table>
      <tbody>
        ${tableContentProm}
      </tbody>
    </table>
  </ac:rich-text-body>
</ac:structured-macro>
"""

