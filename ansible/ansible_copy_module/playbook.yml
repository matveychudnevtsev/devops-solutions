def deleteHeaders(selectedManifest, userInputPolicies, manifestsMap, envoyFilters) {
    selectedManifest.each { manifestName ->
        def selectedPrefixes = userInputPolicies[manifestName].findAll { k, v -> v == true }.keySet()
        def updatedFilter = envoyFilters.items.find { it.metadata.name == manifestName }

        selectedPrefixes.each { prefix ->
            def currentRegexList = manifestsMap[manifestName][prefix]
            def regexChoices = []
            regexChoices.add(
                separator(name: "separator_${prefix}", separatorStyle: "line", sectionHeader: "Выберите regex для удаления из ${manifestName} - ${prefix}")
            )

            currentRegexList.each { regex ->
                regexChoices.add(booleanParam(name: "${prefix}_${regex}", defaultValue: false, description: regex))
            }

            // Преобразуем ID в URL-безопасный формат
            def safePrefix = prefix.replaceAll(/[\/]/, "_")
            def userInputRegex = input(
                id: "userInputRegexDelete_${manifestName}_${safePrefix}",
                message: "Выберите regex для удаления в ${manifestName} - ${prefix}",
                parameters: regexChoices
            )

            log.infoCustom "userInputRegex - ${userInputRegex}"
            updatedFilter.spec.configPatches.each { patch ->
                def rules = patch.patch?.value?.typed_config?.rules
                if (rules?.policies) {
                    rules.policies.each { policyName, policyValue ->
                        // Проверка на наличие соответствующего prefix
                        def permissions = policyValue.permissions
                        def prefixExists = permissions?.any { permission ->
                            permission.and_rules?.rules?.any { rule ->
                                rule.url_path?.path?.prefix == prefix
                            }
                        }
                        
                        if (prefixExists) {
                            log.infoCustom "Обрабатывается политика с prefix: ${prefix}"
                            def principalsToRemove = []
                            policyValue.principals.each { principal ->
                                if (principal.header?.safe_regex_match?.regex) {
                                    def regexToCheck = principal.header.safe_regex_match.regex
                                    log.infoCustom "Найден regex: ${regexToCheck}"
                                    
                                    // Добавляем principal для удаления, если выбран пользователем
                                    if (userInputRegex["${prefix}_${regexToCheck}"] == true) {
                                        log.infoCustom "Помечен для удаления regex: ${regexToCheck} для политики ${policyName} с prefix ${prefix}"
                                        principalsToRemove.add(principal)
                                    }
                                }
                            }

                            // Удаление principals, если они были помечены
                            if (!principalsToRemove.isEmpty()) {
                                policyValue.principals.removeAll(principalsToRemove)
                                log.infoCustom "Удалены ${principalsToRemove.size()} principals из политики ${policyName} с prefix ${prefix}"
                            }
                        }
                    }
                }
            }
        }
    }
}
