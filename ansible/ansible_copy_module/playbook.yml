def addNewRegexToAllPrefixes(selectedManifest, manifestsMap, envoyFilters) {
    selectedManifest.each { manifestName ->
        def updatedFilter = envoyFilters.items.find { it.metadata.name == manifestName }
        def allPrefixes = [] // Список всех префиксов, которые мы найдем

        // Шаг 1: Поиск всех префиксов в манифесте
        updatedFilter.spec.configPatches.each { patch ->
            def rules = patch.patch?.value?.typed_config?.rules
            if (rules?.policies) {
                rules.policies.each { policyName, policyValue ->
                    def permissions = policyValue.permissions
                    permissions?.each { permission ->
                        permission.and_rules?.rules?.each { rule ->
                            def prefix = rule.url_path?.path?.prefix
                            if (prefix) {
                                allPrefixes << prefix
                            }
                        }
                    }
                }
            }
        }

        // Логируем найденные префиксы
        log.infoCustom "Найдено префиксов для ${manifestName}: ${allPrefixes}"

        // Шаг 2: Создание полей для ввода нового регулярного выражения для каждого префикса
        def regexInputs = []
        allPrefixes.each { prefix ->
            def safePrefix = prefix.replaceAll(/[\/]/, "_")
            regexInputs.add(
                string(name: "regex_${safePrefix}", defaultValue: '', description: "Введите новое регулярное выражение для префикса ${prefix}")
            )
        }

        // Шаг 3: Получение новых регулярных выражений от пользователя
        def userInputRegexes = input(
            id: "userInputNewRegexes_${manifestName}",
            message: "Введите новое регулярное выражение для каждого префикса",
            parameters: regexInputs
        )

        // Шаг 4: Добавление новых регулярных выражений в каждую политику для каждого префикса
        updatedFilter.spec.configPatches.each { patch ->
            def rules = patch.patch?.value?.typed_config?.rules
            if (rules?.policies) {
                rules.policies.each { policyName, policyValue ->
                    def permissions = policyValue.permissions
                    permissions?.each { permission ->
                        permission.and_rules?.rules?.each { rule ->
                            def prefix = rule.url_path?.path?.prefix
                            if (prefix) {
                                def safePrefix = prefix.replaceAll(/[\/]/, "_")
                                def newRegex = userInputRegexes["regex_${safePrefix}"]

                                log.infoCustom "Добавление нового регулярного выражения: ${newRegex} в префикс ${prefix}"

                                // Если у политики еще нет principals, создаем их как пустой список
                                if (!policyValue.principals) {
                                    policyValue.principals = []
                                }

                                // Добавляем новое регулярное выражение как новый блок header
                                def newPrincipal = [
                                    header: [
                                        name: "x-forwarded-client-cert",
                                        safe_regex_match: [
                                            google_re2: [max_program_size: '4294967295'],
                                            regex: newRegex
                                        ]
                                    ]
                                ]
                                policyValue.principals.add(newPrincipal)
                            }
                        }
                    }
                }
            }
        }
    }
}
